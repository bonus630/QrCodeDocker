<Button x:Class="br.com.Bonus630DevToolsBar.CustomControls.SVGButton"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:br.com.Bonus630DevToolsBar.CustomControls"
             mc:Ignorable="d" 
           >
    <Button.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" 
                               StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--<SolidColorBrush x:Key="Path.Static.Fill" Color="#000000" />-->
        <Style TargetType="{x:Type local:SVGButton}">
           
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{DynamicResource ControlUI.Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource ControlUI.Default.Static.Foreground}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Top" />
            <Setter Property="Padding" Value="1"/>
            <Setter Property="IsHitTestVisible" Value="True" />
            <!--<Setter Property="Paths">
                <Setter.Value>
                    <CollectionContainer />
                </Setter.Value>
            </Setter>-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:SVGButton}">
                        <Border BorderThickness="1" BorderBrush="Transparent" Name="bg" Background="{TemplateBinding Background}">
                            <ItemsControl ItemsSource="{Binding Paths, RelativeSource={RelativeSource TemplatedParent}}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Path Data="{Binding d}">
                                            <Path.Style>
                                                <Style TargetType="{x:Type Path}">
                                                    <Style.Triggers>

                                                        <DataTrigger Binding="{Binding Path=IsMouseOver,ElementName=bg}" Value="True">
                                                            <Setter  Property="Fill" Value="{DynamicResource ControlUI.Button.MouseOver.Border}" />
                                                        </DataTrigger> 
                                                        <DataTrigger Binding="{Binding Path=IsMouseOver,ElementName=bg}" Value="False">
                                                            <Setter  Property="Fill" Value="{DynamicResource Default.Static.Foreground}" />
                                                        </DataTrigger>
                                                        <!--<MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsMouseOver,ElementName=bg}" Value="True" />


                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Fill" Value="{DynamicResource ControlUI.Button.MouseOver.Border}"/>
                                                        </MultiDataTrigger>-->
                                                    </Style.Triggers>
                                                </Style>
                                            </Path.Style>
                                        </Path>
                                    </DataTemplate>

                                </ItemsControl.ItemTemplate>

                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Grid />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <!--<ItemsControl.ItemContainerStyle>
                                    <Style TargetType="Path">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsMouseOver,ElementName=bg}" Value="True">
                                                <Setter  Property="Fill" Value="Green" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ItemsControl.ItemContainerStyle>-->
                            </ItemsControl>
                        </Border>

                        <!--<ControlTemplate.Triggers>
                      
                        </ControlTemplate.Triggers>-->
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Button.Resources>
</Button>
